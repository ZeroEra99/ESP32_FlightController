@startuml esp32_block_diagram

title Architettura a Blocchi - Software ESP32

package "Input" as input {
    rectangle "IMU" as imu
    note right of imu
        Raccolta dei dati inerziali (velocita'
        angolare, accelerazioni e orientamento)
    end note

    rectangle "Ricevitore" as receiver
    note right of receiver
        Acquisizione dei comandi inviati dal pilota
        tramite stick, switch e potenziometri
    end note
}

package "Elaborazione" as elaborazione {
    rectangle "Controllo del sistema" as system_controller
    note right of system_controller
        Gestione degli stati operativi (ARMATO/DISARMATO) e delle
        modalita' di assistenza (manuale, stabilizzazione, attitudine)
    end note

    rectangle "Controllo del volo" as flight_controller
    note right of flight_controller
        Elaborazione dei dati in ingresso per il controllo del volo
        Calcolo degli output per il controllo degli attuatori
    end note

    system_controller --> flight_controller : Modalita' operativa ed errori
    flight_controller --> system_controller : Output PID
}

package "Output" as output {
    rectangle "Attuatori" as actuators
    note right of actuators
        Applicazione dei comandi ai servomotori e
        agli ESC per il controllo dei movimenti
    end note

    rectangle "LED/RGB" as leds
    note right of leds
        Fornitura di feedback visivo sugli stati operativi
    end note
}

package "Logging" as logging {
    rectangle "Logger" as logger
    note right of logger
        Raccolta e formattazione dei dati diagnostici
        e operativi per il monitoraggio remoto
    end note
}

package "Comunicazione" as comunicazione {
    rectangle "WiFiManager" as wifi
    note right of wifi
        Configurazione e gestione della connessione WiFi
    end note

    rectangle "mDNS" as mdns
    note right of mdns
        Scoperta del server sulla rete locale
    end note

    rectangle "HTTP Client" as http_client
    note right of http_client
        Trasmissione dei dati e log al server tramite richieste HTTP
    end note
}

node "Dati di ingresso" as input_data
node "Dati di uscita" as output_data

input --> input_data : Lettura e normalizzazione
input_data --> elaborazione : Dati IMU e Ricevitore
elaborazione -right--> logging : Messaggi diagnostici e Dati operativi
logging --> comunicazione : Trasmissione dati
elaborazione --down-> output_data : Output attuatori
output_data -down-> output : Comandi attuatori

@enduml
